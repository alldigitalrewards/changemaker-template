// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models from REFACTOR_GUIDE.md
enum Role {
  ADMIN
  PARTICIPANT
}

model Workspace {
  id         String      @id @default(uuid()) @db.Uuid
  slug       String      @unique
  name       String
  users      User[]
  challenges Challenge[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt @default(now())
}

model User {
  id             String       @id @default(uuid()) @db.Uuid
  email          String       @unique
  supabaseUserId String?      @unique @db.Uuid
  role           Role
  workspaceId    String?      @db.Uuid
  workspace      Workspace?   @relation(fields: [workspaceId], references: [id], onDelete: SetNull)
  enrollments    Enrollment[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt @default(now())

  @@index([workspaceId])
  @@index([workspaceId, role])
}

model Challenge {
  id          String       @id @default(uuid()) @db.Uuid
  title       String
  description String
  workspaceId String       @db.Uuid
  workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  enrollments Enrollment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt @default(now())

  @@index([workspaceId])
  @@index([workspaceId, createdAt])
}

model Enrollment {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @db.Uuid
  challengeId String    @db.Uuid
  status      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt @default(now())

  @@unique([userId, challengeId])
  @@index([userId])
  @@index([challengeId])
  @@index([status])
}
